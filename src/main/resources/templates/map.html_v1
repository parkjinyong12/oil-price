<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>주유소 지도 보기</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body { display: flex; margin: 0; font-family: Arial, sans-serif; }
        #map { height: 100vh; width: 65%; }
        #station-list {
          width: 35%; height: 100vh; overflow-y: auto; padding: 20px;
          box-sizing: border-box; border-left: 1px solid #ccc;
        }
        .station-item { margin-bottom: 12px; padding-bottom: 8px; border-bottom: 1px solid #eee; }
        .lowest { color: red; font-weight: bold; }
    </style>
</head>
<body>
<div id="map"></div>
<div id="station-list">
    <h3>⛽ 최저가순 주유소</h3>
    <div id="stations"></div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script th:inline="javascript">
    const address = /*[[${address}]]*/ "";
    const encodedAddress = encodeURIComponent(address);

    const map = L.map('map');

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    fetch('/nearby?address=' + encodedAddress)
      .then(response => response.json())
      .then(data => {
        if (!data || data.length === 0) return;

        const avgLat = data.reduce((sum, s) => sum + s.wgs84Y, 0) / data.length;
        const avgLng = data.reduce((sum, s) => sum + s.wgs84X, 0) / data.length;
        map.setView([avgLat, avgLng], 14);

        const minPrice = Math.min(...data.map(s => s.price));
        const bounds = L.latLngBounds();
        const stationList = document.getElementById('stations');
        const sorted = [...data].sort((a, b) => a.price - b.price);

        const defaultIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        const redIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
            shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        sorted.forEach(station => {
          const isLowest = station.price === minPrice;
          const icon = isLowest ? redIcon : defaultIcon;

          const marker = L.marker([station.wgs84Y, station.wgs84X], { icon }).addTo(map);
          marker.bindTooltip(
            `<strong style="color:${isLowest ? 'red' : 'black'}">${station.stationName}</strong><br/>${station.price}원`,
            { direction: 'top', offset: [0, -10] }
          );
          marker.bindPopup(`
            <strong>${station.stationName}</strong><br/>
            가격: ${station.price}원
          `);

          bounds.extend([station.wgs84Y, station.wgs84X]);

          const div = document.createElement('div');
          div.className = 'station-item';
          div.innerHTML = `
            <span class="${isLowest ? 'lowest' : ''}">${station.stationName}</span><br/>
            <span>${station.price.toLocaleString()}원</span>
          `;
          stationList.appendChild(div);
        });

        map.fitBounds(bounds, {
          paddingTopLeft: [40, 40],
          maxZoom: 15
        });
      })
      .catch(err => console.error('주유소 데이터를 불러오는 중 오류 발생:', err));
</script>
</body>
</html>
